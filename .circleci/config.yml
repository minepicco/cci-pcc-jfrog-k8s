version: 2.1

executors:
  builder:
    machine: true
  deployer:
    docker:
      - image: minepicco/cc-build-image:latest

workflows:

  build-deploy:
    jobs:
      - build_scan:
          context: webpage_deployment
      - hold:
          type: approval
          requires:
            - build_scan
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - hold
          context: webpage_deployment
          filters:
            branches:
              only: master

jobs:
  build_scan:
    executor: builder
    
    environment:
      dev_repo: "docker-local"
      imagename: "artifactory.nohara/docker-local"
      
    steps:
      - checkout
      
      - run:
          name: Prepare Environment -- Install JFrog CLI
          command: |
            sudo apt-get update && sudo apt-get install -y curl
            curl -fL https://getcli.jfrog.io | sh

      - run:
          name: Prepare Environment -- Add insecure-registries and hostname
          command: |
            echo '{ "insecure-registries" : ["artifactory.nohara"] }' > daemon.json
            sudo mv daemon.json /etc/docker/
            sudo cat /etc/hosts > hosts && echo $addr" artifactory.nohara" >> hosts
            sudo mv hosts /etc/
            sudo service docker restart
                     
      - run:
          name: Build Image
          command: |
            echo $CIRCLE_PROJECT_REPONAME
            docker build --tag $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM .

      - run:
          name: simple test
          command: |
            docker run --rm --name web -p 8080:80 -d $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM
            curl http://localhost:8080
            docker stop web

      - run:
          name: Prisma Cloud Vuln/Compliance check
          command: |
            curl -k -u $tl_u:$tl_p --output twistcli $TL_URL"/api/v1/util/twistcli"
            chmod +x twistcli
            ./twistcli images scan --details --address $TL_URL -u $tl_u -p $tl_p --ci $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM 
            
      - run:
          name: JFrogCLI config, image push and Licence policy scan
          command: |
            ./jfrog rt config --user=$juser --password=$jpass --url="http://artifactory.nohara/artifactory" $jid
            ./jfrog rt docker-push $imagename"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_BUILD_NUM $dev_repo --build-name=$CIRCLE_PROJECT_REPONAME --build-number=$CIRCLE_BUILD_NUM
            ./jfrog rt bce $CIRCLE_PROJECT_REPONAME $CIRCLE_BUILD_NUM
            ./jfrog rt bag $CIRCLE_PROJECT_REPONAME $CIRCLE_BUILD_NUM
            ./jfrog rt bp $CIRCLE_PROJECT_REPONAME $CIRCLE_BUILD_NUM
            ./jfrog rt bs $CIRCLE_PROJECT_REPONAME $CIRCLE_BUILD_NUM
      - run:
          name: Slack Notification
          command: |
            curl -X POST -d 'payload={"attachments": [{"text": "ビルドのスキャンが完了しました！'$CIRCLE_BUILD_URL'"}]}' $wh_url

  deploy:
    executor: deployer
    environment:
      prod_repo: "docker-prod"
      imagename: "artifactory.nohara/docker-prod"
      comp: "low"
      
    steps:
      - checkout
      - setup_remote_docker

      - run:
          name: JFrogCLI promote image to production
          command: |
            /jfrog rt config --user=$juser --password=$jpass --url="http://"$addr"/artifactory" $jid
            /jfrog rt bpr $CIRCLE_PROJECT_REPONAME $CIRCLE_PREVIOUS_BUILD_NUM $prod_repo

      - run:
          name: Configure gcloud cli
          command: |
            echo $key>key.json
            gcloud auth activate-service-account --key-file=key.json
            gcloud beta container clusters get-credentials $cluster --region $region --project $project
            
      - run:
          name: Create Kubernetes Manifest
          command: |
            deploy_image=$addr"/"$prod_repo"/"$CIRCLE_PROJECT_REPONAME":"$CIRCLE_PREVIOUS_BUILD_NUM
            echo "      - image: "$deploy_image >> web1.yaml
            cat web2.yaml >> web1.yaml
            
      - run:
          name: Prisma Cloud scan IaC
          command: |
            curl -k -u $tl_u:$tl_p --output twistcli $TL_URL"/api/v1/util/twistcli"
            chmod +x twistcli
            ./twistcli iac scan --publish --compliance-threshold $comp -u $tl_u -p $tl_p --address $TL_URL web1.yaml
            
      - run:
          name: deployment
          command: |
            kubectl apply -f web1.yaml
            kubectl get pods -o wide
